[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools ~= 65.0.0", "versioningit ~= 2.2.0", "wheel"]

[project]
name = "adaptive"
dynamic = ["version"]
description = "Parallel active learning of mathematical functions"
maintainers = [{ name = "Adaptive authors" }]
license = { text = "BSD" }
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: BSD License",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]
dependencies = [
    "scipy",
    "sortedcollections >= 1.1",
    "sortedcontainers >= 2.0",
    "cloudpickle",
    "loky >= 2.9",
    "typing_extensions; python_version < '3.10'",
    "versioningit",
]

[project.optional-dependencies]
other = [
    "dill",
    "distributed",
    "ipyparallel>=6.2.5",       # because of https://github.com/ipython/ipyparallel/issues/404
    "scikit-optimize>=0.8.1",   # because of https://github.com/scikit-optimize/scikit-optimize/issues/931
    "scikit-learn",
    "wexpect; os_name == 'nt'",
    "pexpect; os_name != 'nt'",
]
notebook = [
    "ipython",
    "ipykernel>=4.8.0",      # because https://github.com/ipython/ipykernel/issues/274 and https://github.com/ipython/ipykernel/issues/263
    "jupyter_client>=5.2.2", # because https://github.com/jupyter/jupyter_client/pull/314
    "holoviews>=1.9.1",
    "ipywidgets",
    "bokeh",
    "pandas",
    "matplotlib",
    "plotly",
]
testing = [
    "flaky",
    "pytest",
    "pytest-cov",
    "pytest-randomly",
    "pytest-timeout",
    "pre_commit",
    "typeguard",
]

[project.urls]
homepage = "https://adaptive.readthedocs.io/"
documentation = "https://adaptive.readthedocs.io/"
repository = "https://github.com/python-adaptive/adaptive"

[project.readme]
content-type = "text/markdown"
file = "README.md"

[tool.setuptools.packages.find]
include = ["adaptive.*", "adaptive"]

[tool.pytest.ini_options]
testpaths = ["adaptive"]
addopts = "--durations=5 --cov --cov-append --cov-fail-under=70 -vvv --cov-report="
norecursedirs = ["docs"]

[tool.coverage.paths]
source = ["adaptive", ".nox/py*/lib/python*/site-packages"]

[tool.coverage.run]
branch = true
parallel = true
source = ["adaptive"]

[tool.coverage.report]
show_missing = true
precision = 2

[tool.coverage.xml]
output = ".coverage.xml"

[tool.mypy]
ignore_missing_imports = true
python_version = "3.9"

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    # "AIR", # Airflow
    # "ANN", # flake8-annotations
    # "ARG", # flake8-unused-arguments
    # "ASYNC", # flake8-async
    "B", # flake8-bugbear
    # "BLE", # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    # "COM", # flake8-commas
    # "CPY", # flake8-copyright
    # "D", # pydocstyle
    # "DJ", # flake8-django
    # "DTZ", # flake8-datetimez
    "E", # pycodestyle
    "W", # pycodestyle
    "E", # Error
    # "EM", # flake8-errmsg
    # "ERA", # eradicate
    # "EXE", # flake8-executable
    "F", # Pyflakes
    # "FA", # flake8-future-annotations
    # "FBT", # flake8-boolean-trap
    # "FIX", # flake8-fixme
    # "FLY", # flynt
    # "FURB", # refurb
    # "G", # flake8-logging-format
    "I", # isort
    # "ICN", # flake8-import-conventions
    # "INP", # flake8-no-pep420
    # "INT", # flake8-gettext
    # "ISC", # flake8-implicit-str-concat
    # "LOG", # flake8-logging
    # "N", # pep8-naming
    # "NPY", # NumPy-specific rules
    # "PD", # pandas-vet
    # "PERF", # Perflint
    # "PGH", # pygrep-hooks
    # "PIE", # flake8-pie
    # "PL", # Pylint
    # "PT", # flake8-pytest-style
    # "PTH", # flake8-use-pathlib
    # "PYI", # flake8-pyi
    # "Q", # flake8-quotes
    # "RET", # flake8-return
    # "RSE", # flake8-raise
    # "RUF", # Ruff-specific rules
    # "S", # flake8-bandit
    # "SIM", # flake8-simplify
    # "SLF", # flake8-self
    # "SLOT", # flake8-slots
    "T10", # flake8-debugger
    "T20", # flake8-print
    # "TCH", # flake8-type-checking
    # "TD", # flake8-todos
    # "TID", # flake8-tidy-imports
    # "TRIO", # flake8-trio
    # "TRY", # tryceratops
    "UP", # pyupgrade
    # "W", # Warning
    # "YTT", # flake8-2020
]
ignore = [
    "T20",     # flake8-print
    "ANN101",  # Missing type annotation for {name} in method
    "S101",    # Use of assert detected
    "PD901",   # df is a bad variable name. Be kinder to your future self.
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in {name}
    "D402",    # First line should not be the function's signature
    "PLW0603", # Using the global statement to update `X` is discouraged
    "D401",    # First line of docstring should be in imperative mood
    "E501",    # Line too long
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["SLF001"]
"ci/*" = ["INP001"]
"tests/test_examples.py" = ["E501"]

[tool.versioningit]

[tool.versioningit.vcs]
method = "git"
match = ["v*"]
default-tag = "0.0.0"

[tool.versioningit.onbuild]
build-file = "adaptive/_version.py"
source-file = "adaptive/_version.py"
